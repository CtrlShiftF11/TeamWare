<!DOCTYPE html>
<html>
<%= include partials/navmenu %>
<head>
    <script>
        $(document).ready(function () {
            //Get Teams and Projects for grid drop down lists...
            $.when($.getJSON('http://localhost:3000/teams'), $.getJSON('http://localhost:3000/projects'))
                    .done(function (teamData, projectData) {
                        var teams = [];
                        for (var i = 0; i < teamData[0].length; i++) {
                            var team = {};
                            team.value = teamData[0][i]._id;
                            team.text = teamData[0][i].name;
                            teams.push(team);
                        }
                        var projects = [];
                        for (var j = 0; j < projectData[0].length; j++) {
                            var project = {};
                            project.value = projectData[0][j]._id;
                            project.text = projectData[0][j].name;
                            projects.push(project);
                        }
                        loadSprintGrid(teams, projects);
                    });

            //Sprint Comment User List - NOTE: This is prototype code that I'll replace with a dynamic db driven list at a later date...
            var userList = ['', 'Andy Sandefer', 'Brian Thayer', 'Bryan Everly', 'Chris Lenzo', 'Jennifer Davis', 'Roy Stecker', 'Tamara Schultz'];
            $("#userList").kendoDropDownList({
                dataSource: userList
            });

            /*
             ToDo: This dialog needs to be transformed into a master/detail view with a list of existing sprint comments on the left
             ToDo: and a comment editor on the right!
             */


            function showComment(e) {
                sprintCommentWin = $("#sprintCommentDialog")
                        .kendoWindow({
                            title: "Sprint Comment",
                            modal: true,
                            visible: false,
                            resizable: false,
                            width: 440,
                            height: 380
                        }).data("kendoWindow");
                e.preventDefault();
                var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
                window.selectedSprintId = dataItem._id;
                sprintCommentWin.center().open();
            }

            $("#btnSaveComment").on('click', function (e) {
                var sprint = {
                    _id: window.selectedSprintId,
                    comments: {
                        user_name: $("#userList").val(),
                        comment_text: $("#sprintComment").val()
                    }
                };
                $.ajax({
                    url: "http://localhost:3000/sprints/" + sprint._id + "/addcomment",
                    type: "PUT",
                    dataType: "json",
                    data: kendo.stringify(sprint),
                    contentType: "application/json"
                })
                        .done(function (res) {
                            sprintCommentWin.close();
                        })
                        .fail(function () {
                            alert('Unable to save sprint comment.');
                        })
                        .always(function () {
                            window.selectedSprintId = null;
                        });
            });
            $("#btnCancelComment").on('click', function (e) {
                window.selectedSprintId = null;
                sprintCommentWin.close();
            });

            function loadSprintGrid(teams, projects) {
                var baseUrl = "http://localhost:3000/sprints/";
                var dataSource = new kendo.data.DataSource({
                    transport: {
                        read: {
                            url: baseUrl,
                            dataType: "json",
                            type: "GET",
                            contentType: "application/json"
                        },
                        update: {
                            url: function (e) {
                                return baseUrl + e._id;
                            },
                            dataType: "json",
                            type: "PUT",
                            contentType: "application/json"
                        },
                        destroy: {
                            url: function (e) {
                                return baseUrl + e._id;
                            },
                            dataType: "json",
                            type: "DELETE",
                            contentType: "application/json"
                        },
                        create: {
                            url: baseUrl,
                            dataType: "json",
                            type: "POST",
                            contentType: "application/json"
                        },
                        parameterMap: function (options, operation) {
                            if (operation !== "read") {
                                return kendo.stringify(options);
                            }
                        }
                    },
                    pageSize: 20,
                    schema: {
                        model: {
                            id: "_id",
                            fields: {
                                _id: { editable: false, nullable: true },
                                start_date: { type: "date", validation: { required: true }},
                                end_date: { type: "date", validation: { required: true }},
                                team_id: { field: "team_id", type: "string", validation: { required: true }, defaultValue: teams[0].value },
                                project_id: { field: "project_id", type: "string", validation: { required: true }, defaultValue: projects[0].value },
                                planned_points: { type: "number", validation: { required: true }},
                                actual_points: { type: "number", validation: { required: true }},
                                non_scored_tasks: { type: "number", validation: { required: true }},
                                standard_story_points: { type: "number", validation: { required: true }},
                                research_spike_points: { type: "number", validation: { required: true }},
                                refactor_points: { type: "number", validation: { required: true }}
                            }
                        }
                    }
                });

                $("#sprintGrid").kendoGrid({
                    dataSource: dataSource,
                    pageable: true,
                    selectable: "row",
                    resizable: true,
                    sortable: true,
                    filterable: true,
                    height: 450,
                    toolbar: ["create"],
                    columns: [
                        { field: "start_date", title: "Start Date", width: "100px", template: '#= kendo.toString(start_date, "MM/dd/yyyy") #' },
                        { field: "end_date", title: "End Date", width: "100px", template: '#= kendo.toString(end_date, "MM/dd/yyyy") #' },
                        { field: "team_id", title: "Team", width: "180px", values: teams },
                        { field: "project_id", title: "Project", width: "180px", values: projects },
                        { field: "planned_points", title: "Planned Points", width: "80px"},
                        { field: "actual_points", title: "Actual Points", width: "80px"},
                        { field: "standard_story_points", title: "Story Points", width: "80px"},
                        { field: "research_spike_points", title: "Research Spike Points", width: "100px"},
                        { field: "refactor_points", title: "Refactor Points", width: "80px"},
                        { field: "non_scored_tasks", title: "Non Scored Tasks", width: "100px"},
                        { command: ["edit", "destroy", {name: "Comment", click: showComment}], title: "&nbsp;", width: "250px" }
                    ],
                    editable: "inline",
                    dataBound: function (e) {
                        this.select(e.sender.tbody.find("tr:first"));
                    }
                });
            }

        });
    </script>

</head>
<body>
<div id="sprintCommentDialog" style="display:none;">
    <div class="well">
        <div style="padding-top: 4px; padding-bottom: 4px;">
            <label for="userList">Commenter</label>

            <div id="userList"></div>
        </div>

        <div style="clear:both;"></div>
        <textarea id="sprintComment" name="sprintComment" style="width:340px; height: 220px;" placeholder="Sprint comments..."></textarea>

        <div>
            <button id="btnSaveComment" class="btn btn-default">
                <span class="glyphicon glyphicon-align-left glyphicon-floppy-save">Save</span>
            </button>
            <button id="btnCancelComment" class="btn btn-default">Cancel</button>
        </div>
    </div>
</div>

<div id="sprintGrid"></div>

</body>
</html>